package rf.saleshorizon.contract;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.3.0.
 */
public class InsuranceSales extends Contract {
    private static final String BINARY = "6080604052606460005561001b336001600160e01b0361002016565b610055565b604080517f636f6e74726163742e6f776e65720000000000000000000000000000000000008152905190819003600e01902055565b61366080620000656000396000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c806397e8f9f7116100ad578063c663b27d11610071578063c663b27d146109f7578063cb3d17cc14610a9b578063e2d5d32214610bc4578063f78aa6c514610c68578063f7c2174a14610e1657610121565b806397e8f9f7146107dd5780639ac31bf814610881578063a6f9dae114610925578063a7b8a9e41461094b578063c33ea78a1461095357610121565b8063560a319f116100f4578063560a319f146105205780635664d69c146105c4578063657e007c146106f85780637a57b1c81461079c5780638da5cb5b146107b957610121565b80632342182514610126578063350430f6146102d65780634369f4bc1461037a57806352dd2485146104a3575b600080fd5b6102d46004803603606081101561013c57600080fd5b810190602081018135600160201b81111561015657600080fd5b82018360208201111561016857600080fd5b803590602001918460018302840111600160201b8311171561018957600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295949360208101935035915050600160201b8111156101db57600080fd5b8201836020820111156101ed57600080fd5b803590602001918460018302840111600160201b8311171561020e57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295949360208101935035915050600160201b81111561026057600080fd5b82018360208201111561027257600080fd5b803590602001918460018302840111600160201b8311171561029357600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610f3f945050505050565b005b6102d4600480360360208110156102ec57600080fd5b810190602081018135600160201b81111561030657600080fd5b82018360208201111561031857600080fd5b803590602001918460018302840111600160201b8311171561033957600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955061129b945050505050565b6102d46004803603604081101561039057600080fd5b810190602081018135600160201b8111156103aa57600080fd5b8201836020820111156103bc57600080fd5b803590602001918460018302840111600160201b831117156103dd57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295949360208101935035915050600160201b81111561042f57600080fd5b82018360208201111561044157600080fd5b803590602001918460018302840111600160201b8311171561046257600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506114c5945050505050565b6104ab611769565b6040805160208082528351818301528351919283929083019185019080838360005b838110156104e55781810151838201526020016104cd565b50505050905090810190601f1680156105125780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6104ab6004803603602081101561053657600080fd5b810190602081018135600160201b81111561055057600080fd5b82018360208201111561056257600080fd5b803590602001918460018302840111600160201b8311171561058357600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955061195a945050505050565b6102d4600480360360608110156105da57600080fd5b810190602081018135600160201b8111156105f457600080fd5b82018360208201111561060657600080fd5b803590602001918460018302840111600160201b8311171561062757600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295949360208101935035915050600160201b81111561067957600080fd5b82018360208201111561068b57600080fd5b803590602001918460018302840111600160201b831117156106ac57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550505090356001600160a01b03169150611bdd9050565b6104ab6004803603602081101561070e57600080fd5b810190602081018135600160201b81111561072857600080fd5b82018360208201111561073a57600080fd5b803590602001918460018302840111600160201b8311171561075b57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550611d94945050505050565b6102d4600480360360208110156107b257600080fd5b5035611f26565b6107c1611f92565b604080516001600160a01b039092168252519081900360200190f35b6102d4600480360360208110156107f357600080fd5b810190602081018135600160201b81111561080d57600080fd5b82018360208201111561081f57600080fd5b803590602001918460018302840111600160201b8311171561084057600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550612009945050505050565b6104ab6004803603602081101561089757600080fd5b810190602081018135600160201b8111156108b157600080fd5b8201836020820111156108c357600080fd5b803590602001918460018302840111600160201b831117156108e457600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550612233945050505050565b6102d46004803603602081101561093b57600080fd5b50356001600160a01b031661237a565b6104ab61247d565b6107c16004803603602081101561096957600080fd5b810190602081018135600160201b81111561098357600080fd5b82018360208201111561099557600080fd5b803590602001918460018302840111600160201b831117156109b657600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550612652945050505050565b6104ab60048036036020811015610a0d57600080fd5b810190602081018135600160201b811115610a2757600080fd5b820183602082011115610a3957600080fd5b803590602001918460018302840111600160201b83111715610a5a57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506126c3945050505050565b6102d460048036036040811015610ab157600080fd5b810190602081018135600160201b811115610acb57600080fd5b820183602082011115610add57600080fd5b803590602001918460018302840111600160201b83111715610afe57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295949360208101935035915050600160201b811115610b5057600080fd5b820183602082011115610b6257600080fd5b803590602001918460018302840111600160201b83111715610b8357600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550612899945050505050565b6104ab60048036036020811015610bda57600080fd5b810190602081018135600160201b811115610bf457600080fd5b820183602082011115610c0657600080fd5b803590602001918460018302840111600160201b83111715610c2757600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550612a64945050505050565b6102d460048036036060811015610c7e57600080fd5b810190602081018135600160201b811115610c9857600080fd5b820183602082011115610caa57600080fd5b803590602001918460018302840111600160201b83111715610ccb57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295949360208101935035915050600160201b811115610d1d57600080fd5b820183602082011115610d2f57600080fd5b803590602001918460018302840111600160201b83111715610d5057600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295949360208101935035915050600160201b811115610da257600080fd5b820183602082011115610db457600080fd5b803590602001918460018302840111600160201b83111715610dd557600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550612ba8945050505050565b6102d460048036036040811015610e2c57600080fd5b810190602081018135600160201b811115610e4657600080fd5b820183602082011115610e5857600080fd5b803590602001918460018302840111600160201b83111715610e7957600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295949360208101935035915050600160201b811115610ecb57600080fd5b820183602082011115610edd57600080fd5b803590602001918460018302840111600160201b83111715610efe57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550612f04945050505050565b3360009081526003602052604090205460ff16610f91576040805162461bcd60e51b8152602060048201526019602482015260008051602061360c833981519152604482015290519081900360640190fd5b6000610f9d33846131db565b905080610fdb5760405162461bcd60e51b81526004018080602001828103825260378152602001806135d56037913960400191505060405180910390fd5b60006005846040518082805190602001908083835b6020831061100f5780518252601f199092019160209182019101610ff0565b51815160209384036101000a600019018019909216911617905292019485525060405193849003810184205489516001600160a01b0390911695508794600994508a9350918291908401908083835b6020831061107d5780518252601f19909201916020918201910161105e565b51815160209384036101000a600019018019909216911617905292019485525060405193849003810190932084516110be95919491909101925090506133e7565b50600a856040518082805190602001908083835b602083106110f15780518252601f1990920191602091820191016110d2565b51815160209384036101000a6000190180199092169116179052920194855250604051938490038101842080546001810182556000918252908290200180546001600160a01b0319166001600160a01b0387161790558851600a948a9450925082918401908083835b602083106111795780518252601f19909201916020918201910161115a565b51815160001960209485036101000a0190811690199190911617905292019485525060408051948590038201909420805460018181018355600092835283832090910180546001600160a01b031916331790556001600160a01b0387168252600b83529481208054958601808255908252908290208a5191956112039550019250908901906133e7565b5050846040518082805190602001908083835b602083106112355780518252601f199092019160209182019101611216565b5181516020939093036101000a6000190180199091169216919091179052604051920182900382209350339250506001600160a01b038416907f907dedb9271246ac266fbe7034ae325cda581273aa3bf5818e6394fbc42c33a790600090a45050505050565b3360009081526003602052604090205460ff166112ed576040805162461bcd60e51b8152602060048201526019602482015260008051602061360c833981519152604482015290519081900360640190fd5b336000908152600b60205260408120905b815481101561143c57828051906020012082828154811061131b57fe5b9060005260206000200160405180828054600181600116156101000203166002900480156113805780601f1061135e576101008083540402835291820191611380565b820191906000526020600020905b81548152906001019060200180831161136c575b50509150506040518091039020141561143457805b8254600019018110156113f9578281600101815481106113b157fe5b906000526020600020018382815481106113c757fe5b9060005260206000200190805460018160011615610100020316600290046113f0929190613465565b50600101611395565b5081548290600019810190811061140c57fe5b90600052602060002001600061142291906134da565b815461143283600019830161351e565b505b6001016112fe565b50816040518082805190602001908083835b6020831061146d5780518252601f19909201916020918201910161144e565b5181516020939093036101000a60001901801990911692169190911790526040519201829003822093503392507f42b8127324832459dfe74f3b73469dd71c4b6cfd0e77149d71d7f3703ebedddc9160009150a35050565b3360009081526003602052604090205460ff16611517576040805162461bcd60e51b8152602060048201526019602482015260008051602061360c833981519152604482015290519081900360640190fd5b6005816040518082805190602001908083835b602083106115495780518252601f19909201916020918201910161152a565b51815160209384036101000a60001901801990921691161790529201948552506040519384900301909220546001600160a01b0316331491506115d59050576040805162461bcd60e51b815260206004820181905260248201527f43616c6c6572206973206e6f74207468652070726f64756374206f776e657221604482015290519081900360640190fd5b600c60006002846040518082805190602001908083835b6020831061160b5780518252601f1990920191602091820191016115ec565b51815160209384036101000a600019018019909216911617905292019485525060408051948590038201909420546001600160a01b031685528481019590955250500160009081208054600181018083559183529183902084519193611679939190910191908501906133e7565b5050806040518082805190602001908083835b602083106116ab5780518252601f19909201916020918201910161168c565b51815160209384036101000a600019018019909216911617905260405191909301819003812087519095503394506002938893508291908401908083835b602083106117085780518252601f1990920191602091820191016116e9565b51815160209384036101000a600019018019909216911617905292019485525060405193849003018320546001600160a01b0316927f47df909fcc0fb29a6c31aad23a80bdb09ea07722becef2f5a36bebd35d79085f925060009150a45050565b3360009081526003602052604090205460609060ff166117be576040805162461bcd60e51b8152602060048201526019602482015260008051602061360c833981519152604482015290519081900360640190fd5b336000908152600860209081526040808320805482518185028101850190935280835260609492939192909184015b828210156118985760008481526020908190208301805460408051601f60026000196101006001871615020190941693909304928301859004850281018501909152818152928301828280156118845780601f1061185957610100808354040283529160200191611884565b820191906000526020600020905b81548152906001019060200180831161186757829003601f168201915b5050505050815260200190600101906117ed565b50506040805160208101909152600080825290955092935050505b81518110156119555760008282815181106118ca57fe5b602002602001015151111561194d57806118f9578181815181106118ea57fe5b6020026020010151925061194d565b6040805180820190915260018152600b60fa1b602082015261192290849063ffffffff6132a316565b925061194a82828151811061193357fe5b6020026020010151846132a390919063ffffffff16565b92505b6001016118b3565b505090565b3360009081526003602052604090205460609060ff166119af576040805162461bcd60e51b8152602060048201526019602482015260008051602061360c833981519152604482015290519081900360640190fd5b6060600a836040518082805190602001908083835b602083106119e35780518252601f1990920191602091820191016119c4565b51815160209384036101000a600019018019909216911617905292019485525060408051948590038201852080548084028701840190925281865293509150830182828015611a5b57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611a3d575b509394506000935083925050505b8251811015611aac57828181518110611a7e57fe5b60200260200101516001600160a01b0316336001600160a01b03161415611aa457600191505b600101611a69565b5080611ae95760405162461bcd60e51b81526004018080602001828103825260258152602001806135b06025913960400191505060405180910390fd5b6009846040518082805190602001908083835b60208310611b1b5780518252601f199092019160209182019101611afc565b518151600019602094850361010090810a820192831692199390931691909117909252949092019687526040805197889003820188208054601f6002600183161590980290950116959095049283018290048202880182019052818752929450925050830182828015611bcf5780601f10611ba457610100808354040283529160200191611bcf565b820191906000526020600020905b815481529060010190602001808311611bb257829003601f168201915b505050505092505050919050565b611be561339a565b6001600160a01b0316336001600160a01b031614611c44576040805162461bcd60e51b815260206004820152601760248201527643616c6c65722069736e277420746865206f776e65722160481b604482015290519081900360640190fd5b816001846040518082805190602001908083835b60208310611c775780518252601f199092019160209182019101611c58565b51815160209384036101000a60001901801990921691161790529201948552506040519384900381019093208451611cb895919491909101925090506133e7565b50806002846040518082805190602001908083835b60208310611cec5780518252601f199092019160209182019101611ccd565b51815160209384036101000a60001901801990921691161790529201948552506040805194859003820190942080546001600160a01b0319166001600160a01b039687161790559385166000818152600390955292909320805460ff19166001179055509050611d5a61339a565b6001600160a01b03167f8c2f3fdaecbc84c2b1655605773e1c97e3e06afb3fc7506992085c2ad6f06e1b60405160405180910390a3505050565b3360009081526003602052604090205460609060ff16611de9576040805162461bcd60e51b8152602060048201526019602482015260008051602061360c833981519152604482015290519081900360640190fd5b6000611df533846131db565b905080611e335760405162461bcd60e51b81526004018080602001828103825260378152602001806135d56037913960400191505060405180910390fd5b6004836040518082805190602001908083835b60208310611e655780518252601f199092019160209182019101611e46565b518151600019602094850361010090810a820192831692199390931691909117909252949092019687526040805197889003820188208054601f6002600183161590980290950116959095049283018290048202880182019052818752929450925050830182828015611f195780601f10611eee57610100808354040283529160200191611f19565b820191906000526020600020905b815481529060010190602001808311611efc57829003601f168201915b5050505050915050919050565b611f2e61339a565b6001600160a01b0316336001600160a01b031614611f8d576040805162461bcd60e51b815260206004820152601760248201527643616c6c65722069736e277420746865206f776e65722160481b604482015290519081900360640190fd5b600055565b6000611f9c61339a565b6001600160a01b0316336001600160a01b031614611ffb576040805162461bcd60e51b815260206004820152601760248201527643616c6c65722069736e277420746865206f776e65722160481b604482015290519081900360640190fd5b61200361339a565b90505b90565b3360009081526003602052604090205460ff1661205b576040805162461bcd60e51b8152602060048201526019602482015260008051602061360c833981519152604482015290519081900360640190fd5b336000908152600860205260408120905b81548110156121aa57828051906020012082828154811061208957fe5b9060005260206000200160405180828054600181600116156101000203166002900480156120ee5780601f106120cc5761010080835404028352918201916120ee565b820191906000526020600020905b8154815290600101906020018083116120da575b5050915050604051809103902014156121a257805b8254600019018110156121675782816001018154811061211f57fe5b9060005260206000200183828154811061213557fe5b90600052602060002001908054600181600116156101000203166002900461215e929190613465565b50600101612103565b5081548290600019810190811061217a57fe5b90600052602060002001600061219091906134da565b81546121a083600019830161351e565b505b60010161206c565b50816040518082805190602001908083835b602083106121db5780518252601f1990920191602091820191016121bc565b5181516020939093036101000a60001901801990911692169190911790526040519201829003822093503392507fe9d8e575dc9bf6fb198822ef40c436dbed83035d25465749622c7f783651d5159160009150a35050565b3360009081526003602052604090205460609060ff16612288576040805162461bcd60e51b8152602060048201526019602482015260008051602061360c833981519152604482015290519081900360640190fd5b6001826040518082805190602001908083835b602083106122ba5780518252601f19909201916020918201910161229b565b518151600019602094850361010090810a820192831692199390931691909117909252949092019687526040805197889003820188208054601f600260018316159098029095011695909504928301829004820288018201905281875292945092505083018282801561236e5780601f106123435761010080835404028352916020019161236e565b820191906000526020600020905b81548152906001019060200180831161235157829003601f168201915b50505050509050919050565b61238261339a565b6001600160a01b0316336001600160a01b0316146123e1576040805162461bcd60e51b815260206004820152601760248201527643616c6c65722069736e277420746865206f776e65722160481b604482015290519081900360640190fd5b6001600160a01b0381166124265760405162461bcd60e51b815260040180806020018281038252602b815260200180613585602b913960400191505060405180910390fd5b7fb532073b38c83145e3e5135377a08bf9aab55bc0fd7c1179cd4fb995d2a5159c61244f61339a565b604080516001600160a01b03928316815291841660208301528051918290030190a161247a816133c1565b50565b3360009081526003602052604090205460609060ff166124d2576040805162461bcd60e51b8152602060048201526019602482015260008051602061360c833981519152604482015290519081900360640190fd5b336000908152600b60209081526040808320805482518185028101850190935280835260609492939192909184015b828210156125ac5760008481526020908190208301805460408051601f60026000196101006001871615020190941693909304928301859004850281018501909152818152928301828280156125985780601f1061256d57610100808354040283529160200191612598565b820191906000526020600020905b81548152906001019060200180831161257b57829003601f168201915b505050505081526020019060010190612501565b50506040805160208101909152600080825290955092935050505b81518110156119555760008282815181106125de57fe5b602002602001015151111561264a578061260d578181815181106125fe57fe5b6020026020010151925061264a565b6040805180820190915260018152600b60fa1b602082015261263690849063ffffffff6132a316565b925061264782828151811061193357fe5b92505b6001016125c7565b60006002826040518082805190602001908083835b602083106126865780518252601f199092019160209182019101612667565b51815160209384036101000a60001901801990921691161790529201948552506040519384900301909220546001600160a01b0316949350505050565b3360009081526003602052604090205460609060ff16612718576040805162461bcd60e51b8152602060048201526019602482015260008051602061360c833981519152604482015290519081900360640190fd5b60606007836040518082805190602001908083835b6020831061274c5780518252601f19909201916020918201910161272d565b51815160209384036101000a6000190180199092169116179052920194855250604080519485900382018520805480840287018401909252818652935091508301828280156127c457602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116127a6575b509394506000935083925050505b8251811015612815578281815181106127e757fe5b60200260200101516001600160a01b0316336001600160a01b0316141561280d57600191505b6001016127d2565b5080612868576040805162461bcd60e51b815260206004820181905260248201527f43616c6c657220617265206e6f742074686520706f6c696379206f776e657221604482015290519081900360640190fd5b60068460405180828051906020019080838360208310611b1b5780518252601f199092019160209182019101611afc565b3360009081526003602052604090205460ff166128eb576040805162461bcd60e51b8152602060048201526019602482015260008051602061360c833981519152604482015290519081900360640190fd5b806004836040518082805190602001908083835b6020831061291e5780518252601f1990920191602091820191016128ff565b51815160209384036101000a6000190180199092169116179052920194855250604051938490038101909320845161295f95919491909101925090506133e7565b50336005836040518082805190602001908083835b602083106129935780518252601f199092019160209182019101612974565b51815160209384036101000a6000190180199092169116179052920194855250604051938490038101842080546001600160a01b0319166001600160a01b0396909616959095179094555050835184928291908401908083835b60208310612a0c5780518252601f1990920191602091820191016129ed565b5181516020939093036101000a60001901801990911692169190911790526040519201829003822093503392507faf967c3669791b1dccd8d89780d2482ab2364a1b74238dd917a9b1b91f49838b9160009150a35050565b3360009081526003602052604090205460609060ff16612ab9576040805162461bcd60e51b8152602060048201526019602482015260008051602061360c833981519152604482015290519081900360640190fd5b6005826040518082805190602001908083835b60208310612aeb5780518252601f199092019160209182019101612acc565b51815160209384036101000a60001901801990921691161790529201948552506040519384900301909220546001600160a01b031633149150612b779050576040805162461bcd60e51b815260206004820181905260248201527f43616c6c6572206973206e6f74207468652070726f64756374206f776e657221604482015290519081900360640190fd5b600482604051808280519060200190808383602083106122ba5780518252601f19909201916020918201910161229b565b3360009081526003602052604090205460ff16612bfa576040805162461bcd60e51b8152602060048201526019602482015260008051602061360c833981519152604482015290519081900360640190fd5b6000612c0633846131db565b905080612c445760405162461bcd60e51b81526004018080602001828103825260378152602001806135d56037913960400191505060405180910390fd5b60006005846040518082805190602001908083835b60208310612c785780518252601f199092019160209182019101612c59565b51815160209384036101000a600019018019909216911617905292019485525060405193849003810184205489516001600160a01b0390911695508794600694508a9350918291908401908083835b60208310612ce65780518252601f199092019160209182019101612cc7565b51815160209384036101000a60001901801990921691161790529201948552506040519384900381019093208451612d2795919491909101925090506133e7565b506007856040518082805190602001908083835b60208310612d5a5780518252601f199092019160209182019101612d3b565b51815160209384036101000a6000190180199092169116179052920194855250604051938490038101842080546001810182556000918252908290200180546001600160a01b0319166001600160a01b03871617905588516007948a9450925082918401908083835b60208310612de25780518252601f199092019160209182019101612dc3565b51815160001960209485036101000a0190811690199190911617905292019485525060408051948590038201909420805460018181018355600092835283832090910180546001600160a01b031916331790556001600160a01b0387168252600883529481208054958601808255908252908290208a519195612e6c9550019250908901906133e7565b5050846040518082805190602001908083835b60208310612e9e5780518252601f199092019160209182019101612e7f565b5181516020939093036101000a6000190180199091169216919091179052604051920182900382209350339250506001600160a01b038416907f6b9cb907108df2958fad0180bdaee958643e100dc5f5ad8ee28fb461f468458490600090a45050505050565b3360009081526003602052604090205460ff16612f56576040805162461bcd60e51b8152602060048201526019602482015260008051602061360c833981519152604482015290519081900360640190fd5b6005816040518082805190602001908083835b60208310612f885780518252601f199092019160209182019101612f69565b51815160209384036101000a60001901801990921691161790529201948552506040519384900301909220546001600160a01b0316331491506130149050576040805162461bcd60e51b815260206004820181905260248201527f43616c6c6572206973206e6f74207468652070726f64756374206f776e657221604482015290519081900360640190fd5b6000600c60006002856040518082805190602001908083835b6020831061304c5780518252601f19909201916020918201910161302d565b51815160209384036101000a600019018019909216911617905292019485525060408051948590038201909420546001600160a01b0316855284019490945250016000908120925090505b81548110156131d55782805190602001208282815481106130b457fe5b9060005260206000200160405180828054600181600116156101000203166002900480156131195780601f106130f7576101008083540402835291820191613119565b820191906000526020600020905b815481529060010190602001808311613105575b5050915050604051809103902014156131cd57805b8254600019018110156131925782816001018154811061314a57fe5b9060005260206000200183828154811061316057fe5b906000526020600020019080546001816001161561010002031660029004613189929190613465565b5060010161312e565b508154829060001981019081106131a557fe5b9060005260206000200160006131bb91906134da565b81546131cb83600019830161351e565b505b600101613097565b50505050565b6001600160a01b0382166000908152600c602052604081208190815b815481101561329957848051906020012082828154811061321457fe5b9060005260206000200160405180828054600181600116156101000203166002900480156132795780601f10613257576101008083540402835291820191613279565b820191906000526020600020905b815481529060010190602001808311613265575b50509150506040518091039020141561329157600192505b6001016131f7565b5090949350505050565b6060808390506060839050606081518351016040519080825280601f01601f1916602001820160405280156132df576020820181803883390190505b509050806000805b8551811015613338578581815181106132fc57fe5b602001015160f81c60f81b83838060010194508151811061331957fe5b60200101906001600160f81b031916908160001a9053506001016132e7565b5060005b845181101561338d5784818151811061335157fe5b602001015160f81c60f81b83838060010194508151811061336e57fe5b60200101906001600160f81b031916908160001a90535060010161333c565b5090979650505050505050565b604080516d31b7b73a3930b1ba1737bbb732b960911b8152905190819003600e0190205490565b604080516d31b7b73a3930b1ba1737bbb732b960911b8152905190819003600e01902055565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061342857805160ff1916838001178555613455565b82800160010185558215613455579182015b8281111561345557825182559160200191906001019061343a565b50613461929150613547565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061349e5780548555613455565b8280016001018555821561345557600052602060002091601f016020900482015b828111156134555782548255916001019190600101906134bf565b50805460018160011615610100020316600290046000825580601f10613500575061247a565b601f01602090049060005260206000209081019061247a9190613547565b81548183558181111561354257600083815260209020613542918101908301613561565b505050565b61200691905b80821115613461576000815560010161354d565b61200691905b8082111561346157600061357b82826134da565b5060010161356756fe43616e6e6f74206368616e676520746865204f776e657220746f20746865207a65726f206164647265737343616c6c657220617265206e6f742074686520656e646f7273656d656e74206f776e65722143616c6c657220646f6e27742068617665207468652073616c65732061677265656d656e7420666f7220746869732070726f647563742143616c6c6572206973206e6f7420726567697374657265642100000000000000a265627a7a723058205f83387e46137a25c27874ce9c0753e391dc9d979b8a56b0fd58b84a18c0fb3564736f6c634300050a0032";

    public static final String FUNC_ISSUEENDORSEMENT = "issueEndorsement";

    public static final String FUNC_WITHDRAWPENDINGENDORSEMENT = "withdrawPendingEndorsement";

    public static final String FUNC_APPROVEAGREEMENT = "approveAgreement";

    public static final String FUNC_FINDPENDINGPOLICIES = "findPendingPolicies";

    public static final String FUNC_FINDENDORSEMENT = "findEndorsement";

    public static final String FUNC_REGISTER = "register";

    public static final String FUNC_FINDPRODUCTFROMCHANNEL = "findProductFromChannel";

    public static final String FUNC_SETMAXQUERYNUMBER = "setMaxQueryNumber";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_WITHDRAWPENDINGPOLICY = "withdrawPendingPolicy";

    public static final String FUNC_FINDORGPUBKEY = "findOrgPubKey";

    public static final String FUNC_CHANGEOWNER = "changeOwner";

    public static final String FUNC_FINDPENDINGENDORSEMENTS = "findPendingEndorsements";

    public static final String FUNC_FINDORGADDRESS = "findOrgAddress";

    public static final String FUNC_FINDPOLICY = "findPolicy";

    public static final String FUNC_RELEASEPRODUCT = "releaseProduct";

    public static final String FUNC_FINDPRODUCT = "findProduct";

    public static final String FUNC_ISSUEPOLICY = "issuePolicy";

    public static final String FUNC_WITHDRAWAGREEMENT = "withdrawAgreement";

    public static final Event RELEASEPRODUCT_EVENT = new Event("ReleaseProduct", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Utf8String>(true) {}));
    ;

    public static final Event ISSUEPOLICY_EVENT = new Event("IssuePolicy", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Utf8String>(true) {}));
    ;

    public static final Event WITHDRAWPENDINGPOLICY_EVENT = new Event("WithdrawPendingPolicy", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Utf8String>(true) {}));
    ;

    public static final Event ISSUEENDORSEMENT_EVENT = new Event("IssueEndorsement", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Utf8String>(true) {}));
    ;

    public static final Event WITHDRAWPENDINGENDORSEMENT_EVENT = new Event("WithdrawPendingEndorsement", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Utf8String>(true) {}));
    ;

    public static final Event APPROVESALESAGREEMENT_EVENT = new Event("ApproveSalesAgreement", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Utf8String>(true) {}));
    ;

    public static final Event OWNERCHANGED_EVENT = new Event("OwnerChanged", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event REGISTERORG_EVENT = new Event("RegisterOrg", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    @Deprecated
    protected InsuranceSales(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected InsuranceSales(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected InsuranceSales(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected InsuranceSales(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteCall<TransactionReceipt> issueEndorsement(String endorsementNumber, String productCode, String endorsement) {
        final Function function = new Function(
                FUNC_ISSUEENDORSEMENT, 
                Arrays.<Type>asList(new Utf8String(endorsementNumber),
                new Utf8String(productCode),
                new Utf8String(endorsement)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> withdrawPendingEndorsement(String endorsementNumber) {
        final Function function = new Function(
                FUNC_WITHDRAWPENDINGENDORSEMENT, 
                Arrays.<Type>asList(new Utf8String(endorsementNumber)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> approveAgreement(String orgCode, String productCode) {
        final Function function = new Function(
                FUNC_APPROVEAGREEMENT, 
                Arrays.<Type>asList(new Utf8String(orgCode),
                new Utf8String(productCode)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> findPendingPolicies() {
        final Function function = new Function(FUNC_FINDPENDINGPOLICIES, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<String> findEndorsement(String endorsementNumber) {
        final Function function = new Function(FUNC_FINDENDORSEMENT, 
                Arrays.<Type>asList(new Utf8String(endorsementNumber)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> register(String orgCode, String pubKey, String orgAddress) {
        final Function function = new Function(
                FUNC_REGISTER, 
                Arrays.<Type>asList(new Utf8String(orgCode),
                new Utf8String(pubKey),
                new Address(orgAddress)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> findProductFromChannel(String productCode) {
        final Function function = new Function(FUNC_FINDPRODUCTFROMCHANNEL, 
                Arrays.<Type>asList(new Utf8String(productCode)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> setMaxQueryNumber(BigInteger number) {
        final Function function = new Function(
                FUNC_SETMAXQUERYNUMBER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(number)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> owner() {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> withdrawPendingPolicy(String policyNumber) {
        final Function function = new Function(
                FUNC_WITHDRAWPENDINGPOLICY, 
                Arrays.<Type>asList(new Utf8String(policyNumber)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> findOrgPubKey(String orgCode) {
        final Function function = new Function(FUNC_FINDORGPUBKEY, 
                Arrays.<Type>asList(new Utf8String(orgCode)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> changeOwner(String newOwner) {
        final Function function = new Function(
                FUNC_CHANGEOWNER, 
                Arrays.<Type>asList(new Address(newOwner)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> findPendingEndorsements() {
        final Function function = new Function(FUNC_FINDPENDINGENDORSEMENTS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<String> findOrgAddress(String orgCode) {
        final Function function = new Function(FUNC_FINDORGADDRESS, 
                Arrays.<Type>asList(new Utf8String(orgCode)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<String> findPolicy(String policyNumber) {
        final Function function = new Function(FUNC_FINDPOLICY, 
                Arrays.<Type>asList(new Utf8String(policyNumber)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> releaseProduct(String productCode, String productSpec) {
        final Function function = new Function(
                FUNC_RELEASEPRODUCT, 
                Arrays.<Type>asList(new Utf8String(productCode),
                new Utf8String(productSpec)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> findProduct(String productCode) {
        final Function function = new Function(FUNC_FINDPRODUCT, 
                Arrays.<Type>asList(new Utf8String(productCode)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> issuePolicy(String policyNumber, String productCode, String policy) {
        final Function function = new Function(
                FUNC_ISSUEPOLICY, 
                Arrays.<Type>asList(new Utf8String(policyNumber),
                new Utf8String(productCode),
                new Utf8String(policy)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> withdrawAgreement(String orgCode, String productCode) {
        final Function function = new Function(
                FUNC_WITHDRAWAGREEMENT, 
                Arrays.<Type>asList(new Utf8String(orgCode),
                new Utf8String(productCode)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public List<ReleaseProductEventResponse> getReleaseProductEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(RELEASEPRODUCT_EVENT, transactionReceipt);
        ArrayList<ReleaseProductEventResponse> responses = new ArrayList<ReleaseProductEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ReleaseProductEventResponse typedResponse = new ReleaseProductEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.productCode = (byte[]) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ReleaseProductEventResponse> releaseProductEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, ReleaseProductEventResponse>() {
            @Override
            public ReleaseProductEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(RELEASEPRODUCT_EVENT, log);
                ReleaseProductEventResponse typedResponse = new ReleaseProductEventResponse();
                typedResponse.log = log;
                typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.productCode = (byte[]) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ReleaseProductEventResponse> releaseProductEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(RELEASEPRODUCT_EVENT));
        return releaseProductEventFlowable(filter);
    }

    public List<IssuePolicyEventResponse> getIssuePolicyEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(ISSUEPOLICY_EVENT, transactionReceipt);
        ArrayList<IssuePolicyEventResponse> responses = new ArrayList<IssuePolicyEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            IssuePolicyEventResponse typedResponse = new IssuePolicyEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.issuer = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.policyNumber = (byte[]) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<IssuePolicyEventResponse> issuePolicyEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, IssuePolicyEventResponse>() {
            @Override
            public IssuePolicyEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(ISSUEPOLICY_EVENT, log);
                IssuePolicyEventResponse typedResponse = new IssuePolicyEventResponse();
                typedResponse.log = log;
                typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.issuer = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.policyNumber = (byte[]) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<IssuePolicyEventResponse> issuePolicyEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ISSUEPOLICY_EVENT));
        return issuePolicyEventFlowable(filter);
    }

    public List<WithdrawPendingPolicyEventResponse> getWithdrawPendingPolicyEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(WITHDRAWPENDINGPOLICY_EVENT, transactionReceipt);
        ArrayList<WithdrawPendingPolicyEventResponse> responses = new ArrayList<WithdrawPendingPolicyEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            WithdrawPendingPolicyEventResponse typedResponse = new WithdrawPendingPolicyEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.policyNumber = (byte[]) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<WithdrawPendingPolicyEventResponse> withdrawPendingPolicyEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, WithdrawPendingPolicyEventResponse>() {
            @Override
            public WithdrawPendingPolicyEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(WITHDRAWPENDINGPOLICY_EVENT, log);
                WithdrawPendingPolicyEventResponse typedResponse = new WithdrawPendingPolicyEventResponse();
                typedResponse.log = log;
                typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.policyNumber = (byte[]) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<WithdrawPendingPolicyEventResponse> withdrawPendingPolicyEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(WITHDRAWPENDINGPOLICY_EVENT));
        return withdrawPendingPolicyEventFlowable(filter);
    }

    public List<IssueEndorsementEventResponse> getIssueEndorsementEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(ISSUEENDORSEMENT_EVENT, transactionReceipt);
        ArrayList<IssueEndorsementEventResponse> responses = new ArrayList<IssueEndorsementEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            IssueEndorsementEventResponse typedResponse = new IssueEndorsementEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.issuer = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.endorsementNumber = (byte[]) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<IssueEndorsementEventResponse> issueEndorsementEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, IssueEndorsementEventResponse>() {
            @Override
            public IssueEndorsementEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(ISSUEENDORSEMENT_EVENT, log);
                IssueEndorsementEventResponse typedResponse = new IssueEndorsementEventResponse();
                typedResponse.log = log;
                typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.issuer = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.endorsementNumber = (byte[]) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<IssueEndorsementEventResponse> issueEndorsementEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ISSUEENDORSEMENT_EVENT));
        return issueEndorsementEventFlowable(filter);
    }

    public List<WithdrawPendingEndorsementEventResponse> getWithdrawPendingEndorsementEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(WITHDRAWPENDINGENDORSEMENT_EVENT, transactionReceipt);
        ArrayList<WithdrawPendingEndorsementEventResponse> responses = new ArrayList<WithdrawPendingEndorsementEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            WithdrawPendingEndorsementEventResponse typedResponse = new WithdrawPendingEndorsementEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.endorsementNumber = (byte[]) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<WithdrawPendingEndorsementEventResponse> withdrawPendingEndorsementEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, WithdrawPendingEndorsementEventResponse>() {
            @Override
            public WithdrawPendingEndorsementEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(WITHDRAWPENDINGENDORSEMENT_EVENT, log);
                WithdrawPendingEndorsementEventResponse typedResponse = new WithdrawPendingEndorsementEventResponse();
                typedResponse.log = log;
                typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.endorsementNumber = (byte[]) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<WithdrawPendingEndorsementEventResponse> withdrawPendingEndorsementEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(WITHDRAWPENDINGENDORSEMENT_EVENT));
        return withdrawPendingEndorsementEventFlowable(filter);
    }

    public List<ApproveSalesAgreementEventResponse> getApproveSalesAgreementEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVESALESAGREEMENT_EVENT, transactionReceipt);
        ArrayList<ApproveSalesAgreementEventResponse> responses = new ArrayList<ApproveSalesAgreementEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ApproveSalesAgreementEventResponse typedResponse = new ApproveSalesAgreementEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.approver = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.productCode = (byte[]) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ApproveSalesAgreementEventResponse> approveSalesAgreementEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, ApproveSalesAgreementEventResponse>() {
            @Override
            public ApproveSalesAgreementEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVESALESAGREEMENT_EVENT, log);
                ApproveSalesAgreementEventResponse typedResponse = new ApproveSalesAgreementEventResponse();
                typedResponse.log = log;
                typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.approver = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.productCode = (byte[]) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ApproveSalesAgreementEventResponse> approveSalesAgreementEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVESALESAGREEMENT_EVENT));
        return approveSalesAgreementEventFlowable(filter);
    }

    public List<OwnerChangedEventResponse> getOwnerChangedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERCHANGED_EVENT, transactionReceipt);
        ArrayList<OwnerChangedEventResponse> responses = new ArrayList<OwnerChangedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            OwnerChangedEventResponse typedResponse = new OwnerChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OwnerChangedEventResponse> ownerChangedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, OwnerChangedEventResponse>() {
            @Override
            public OwnerChangedEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERCHANGED_EVENT, log);
                OwnerChangedEventResponse typedResponse = new OwnerChangedEventResponse();
                typedResponse.log = log;
                typedResponse.previousOwner = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.newOwner = (String) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<OwnerChangedEventResponse> ownerChangedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERCHANGED_EVENT));
        return ownerChangedEventFlowable(filter);
    }

    public List<RegisterOrgEventResponse> getRegisterOrgEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(REGISTERORG_EVENT, transactionReceipt);
        ArrayList<RegisterOrgEventResponse> responses = new ArrayList<RegisterOrgEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            RegisterOrgEventResponse typedResponse = new RegisterOrgEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.orgAddress = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RegisterOrgEventResponse> registerOrgEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, RegisterOrgEventResponse>() {
            @Override
            public RegisterOrgEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(REGISTERORG_EVENT, log);
                RegisterOrgEventResponse typedResponse = new RegisterOrgEventResponse();
                typedResponse.log = log;
                typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.orgAddress = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<RegisterOrgEventResponse> registerOrgEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(REGISTERORG_EVENT));
        return registerOrgEventFlowable(filter);
    }

    @Deprecated
    public static InsuranceSales load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new InsuranceSales(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static InsuranceSales load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new InsuranceSales(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static InsuranceSales load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new InsuranceSales(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static InsuranceSales load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new InsuranceSales(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<InsuranceSales> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(InsuranceSales.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<InsuranceSales> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(InsuranceSales.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<InsuranceSales> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(InsuranceSales.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<InsuranceSales> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(InsuranceSales.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class ReleaseProductEventResponse {
        public Log log;

        public String owner;

        public byte[] productCode;
    }

    public static class IssuePolicyEventResponse {
        public Log log;

        public String owner;

        public String issuer;

        public byte[] policyNumber;
    }

    public static class WithdrawPendingPolicyEventResponse {
        public Log log;

        public String owner;

        public byte[] policyNumber;
    }

    public static class IssueEndorsementEventResponse {
        public Log log;

        public String owner;

        public String issuer;

        public byte[] endorsementNumber;
    }

    public static class WithdrawPendingEndorsementEventResponse {
        public Log log;

        public String owner;

        public byte[] endorsementNumber;
    }

    public static class ApproveSalesAgreementEventResponse {
        public Log log;

        public String owner;

        public String approver;

        public byte[] productCode;
    }

    public static class OwnerChangedEventResponse {
        public Log log;

        public String previousOwner;

        public String newOwner;
    }

    public static class RegisterOrgEventResponse {
        public Log log;

        public String owner;

        public String orgAddress;
    }
}
