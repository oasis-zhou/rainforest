package rf.saleshorizon.contract;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.3.0.
 */
public class InsuranceSales extends Contract {
    private static final String BINARY = "60806040819052600080546001600160a01b03191633178082556001600160a01b0316917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3612e96806100576000396000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c806397e8f9f7116100ad578063cb3d17cc11610071578063cb3d17cc14610865578063e1190e8b1461098e578063e2d5d322146109b4578063f2fde38b14610a58578063f78aa6c514610a7e57610121565b806397e8f9f714610659578063a7b8a9e4146106fd578063b2bdfa7b14610705578063b3b4bdde1461070d578063c663b27d146107c157610121565b806352dd2485116100f457806352dd248514610454578063560a319f146104d1578063657e007c146105755780638da5cb5b146106195780638f32d59b1461063d57610121565b80631beb8c2014610126578063200ff7a2146101dc5780632342182514610202578063350430f6146103b0575b600080fd5b6101da6004803603604081101561013c57600080fd5b6001600160a01b038235169190810190604081016020820135600160201b81111561016657600080fd5b82018360208201111561017857600080fd5b803590602001918460018302840111600160201b8311171561019957600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610c2c945050505050565b005b6101da600480360360208110156101f257600080fd5b50356001600160a01b0316610e9a565b6101da6004803603606081101561021857600080fd5b810190602081018135600160201b81111561023257600080fd5b82018360208201111561024457600080fd5b803590602001918460018302840111600160201b8311171561026557600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295949360208101935035915050600160201b8111156102b757600080fd5b8201836020820111156102c957600080fd5b803590602001918460018302840111600160201b831117156102ea57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295949360208101935035915050600160201b81111561033c57600080fd5b82018360208201111561034e57600080fd5b803590602001918460018302840111600160201b8311171561036f57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610f4a945050505050565b6101da600480360360208110156103c657600080fd5b810190602081018135600160201b8111156103e057600080fd5b8201836020820111156103f257600080fd5b803590602001918460018302840111600160201b8311171561041357600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550611212945050505050565b61045c6114e4565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561049657818101518382015260200161047e565b50505050905090810190601f1680156104c35780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61045c600480360360208110156104e757600080fd5b810190602081018135600160201b81111561050157600080fd5b82018360208201111561051357600080fd5b803590602001918460018302840111600160201b8311171561053457600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506116d5945050505050565b61045c6004803603602081101561058b57600080fd5b810190602081018135600160201b8111156105a557600080fd5b8201836020820111156105b757600080fd5b803590602001918460018302840111600160201b831117156105d857600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506118d9945050505050565b610621611a6b565b604080516001600160a01b039092168252519081900360200190f35b610645611a7b565b604080519115158252519081900360200190f35b6101da6004803603602081101561066f57600080fd5b810190602081018135600160201b81111561068957600080fd5b82018360208201111561069b57600080fd5b803590602001918460018302840111600160201b831117156106bc57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550611a8c945050505050565b61045c611d74565b610621611f49565b6101da6004803603604081101561072357600080fd5b6001600160a01b038235169190810190604081016020820135600160201b81111561074d57600080fd5b82018360208201111561075f57600080fd5b803590602001918460018302840111600160201b8311171561078057600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550611f58945050505050565b61045c600480360360208110156107d757600080fd5b810190602081018135600160201b8111156107f157600080fd5b82018360208201111561080357600080fd5b803590602001918460018302840111600160201b8311171561082457600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550612140945050505050565b6101da6004803603604081101561087b57600080fd5b810190602081018135600160201b81111561089557600080fd5b8201836020820111156108a757600080fd5b803590602001918460018302840111600160201b831117156108c857600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295949360208101935035915050600160201b81111561091a57600080fd5b82018360208201111561092c57600080fd5b803590602001918460018302840111600160201b8311171561094d57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550612345945050505050565b610645600480360360208110156109a457600080fd5b50356001600160a01b0316612510565b61045c600480360360208110156109ca57600080fd5b810190602081018135600160201b8111156109e457600080fd5b8201836020820111156109f657600080fd5b803590602001918460018302840111600160201b83111715610a1757600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955061252e945050505050565b6101da60048036036020811015610a6e57600080fd5b50356001600160a01b0316612672565b6101da60048036036060811015610a9457600080fd5b810190602081018135600160201b811115610aae57600080fd5b820183602082011115610ac057600080fd5b803590602001918460018302840111600160201b83111715610ae157600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295949360208101935035915050600160201b811115610b3357600080fd5b820183602082011115610b4557600080fd5b803590602001918460018302840111600160201b83111715610b6657600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295949360208101935035915050600160201b811115610bb857600080fd5b820183602082011115610bca57600080fd5b803590602001918460018302840111600160201b83111715610beb57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506126d7945050505050565b3360009081526001602052604090205460ff16610c7e576040805162461bcd60e51b81526020600482015260196024820152600080516020612e42833981519152604482015290519081900360640190fd5b6003816040518082805190602001908083835b60208310610cb05780518252601f199092019160209182019101610c91565b51815160209384036101000a60001901801990921691161790529201948552506040519384900301909220546001600160a01b031633149150610d3c9050576040805162461bcd60e51b815260206004820181905260248201527f43616c6c6572206973206e6f74207468652070726f64756374206f776e657221604482015290519081900360640190fd5b6001600160a01b0382166000908152600a60205260408120905b8154811015610e94578280519060200120828281548110610d7357fe5b906000526020600020016040518082805460018160011615610100020316600290048015610dd85780601f10610db6576101008083540402835291820191610dd8565b820191906000526020600020905b815481529060010190602001808311610dc4575b505091505060405180910390201415610e8c57805b825460001901811015610e5157828160010181548110610e0957fe5b90600052602060002001838281548110610e1f57fe5b906000526020600020019080546001816001161561010002031660029004610e48929190612bfe565b50600101610ded565b50815482906000198101908110610e6457fe5b906000526020600020016000610e7a9190612c83565b8154610e8a836000198301612cc7565b505b600101610d56565b50505050565b610ea2611a7b565b610ef3576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b038082166000818152600160208190526040808320805460ff191690921790915581549051929316917f8c2f3fdaecbc84c2b1655605773e1c97e3e06afb3fc7506992085c2ad6f06e1b9190a350565b3360009081526001602052604090205460ff16610f9c576040805162461bcd60e51b81526020600482015260196024820152600080516020612e42833981519152604482015290519081900360640190fd5b6000610fa8338461299f565b905080610fe65760405162461bcd60e51b8152600401808060200182810382526037815260200180612de76037913960400191505060405180910390fd5b60006003846040518082805190602001908083835b6020831061101a5780518252601f199092019160209182019101610ffb565b51815160209384036101000a600019018019909216911617905292019485525060405193849003810184205489516001600160a01b0390911695508794600794508a9350918291908401908083835b602083106110885780518252601f199092019160209182019101611069565b51815160209384036101000a600019018019909216911617905292019485525060405193849003810190932084516110c99591949190910192509050612cf0565b50806008866040518082805190602001908083835b602083106110fd5780518252601f1990920191602091820191016110de565b51815160209384036101000a60001901801990921691161790529201948552506040805194859003820190942080546001600160a01b0319166001600160a01b03968716179055938516600090815260098552928320805460018101808355918552938590208a51919561117a959190910193508a019150612cf0565b5050846040518082805190602001908083835b602083106111ac5780518252601f19909201916020918201910161118d565b5181516020939093036101000a6000190180199091169216919091179052604051920182900382209350339250506001600160a01b038416907f907dedb9271246ac266fbe7034ae325cda581273aa3bf5818e6394fbc42c33a790600090a45050505050565b3360009081526001602052604090205460ff16611264576040805162461bcd60e51b81526020600482015260196024820152600080516020612e42833981519152604482015290519081900360640190fd5b6008816040518082805190602001908083835b602083106112965780518252601f199092019160209182019101611277565b51815160209384036101000a60001901801990921691161790529201948552506040519384900301909220546001600160a01b03163314915061130c90505760405162461bcd60e51b8152600401808060200182810382526024815260200180612e1e6024913960400191505060405180910390fd5b336000908152600960205260408120905b815481101561145b57828051906020012082828154811061133a57fe5b90600052602060002001604051808280546001816001161561010002031660029004801561139f5780601f1061137d57610100808354040283529182019161139f565b820191906000526020600020905b81548152906001019060200180831161138b575b50509150506040518091039020141561145357805b825460001901811015611418578281600101815481106113d057fe5b906000526020600020018382815481106113e657fe5b90600052602060002001908054600181600116156101000203166002900461140f929190612bfe565b506001016113b4565b5081548290600019810190811061142b57fe5b9060005260206000200160006114419190612c83565b8154611451836000198301612cc7565b505b60010161131d565b50816040518082805190602001908083835b6020831061148c5780518252601f19909201916020918201910161146d565b5181516020939093036101000a60001901801990911692169190911790526040519201829003822093503392507f42b8127324832459dfe74f3b73469dd71c4b6cfd0e77149d71d7f3703ebedddc9160009150a35050565b3360009081526001602052604090205460609060ff16611539576040805162461bcd60e51b81526020600482015260196024820152600080516020612e42833981519152604482015290519081900360640190fd5b336000908152600660209081526040808320805482518185028101850190935280835260609492939192909184015b828210156116135760008481526020908190208301805460408051601f60026000196101006001871615020190941693909304928301859004850281018501909152818152928301828280156115ff5780601f106115d4576101008083540402835291602001916115ff565b820191906000526020600020905b8154815290600101906020018083116115e257829003601f168201915b505050505081526020019060010190611568565b50506040805160208101909152600080825290955092935050505b81518110156116d057600082828151811061164557fe5b60200260200101515111156116c857806116745781818151811061166557fe5b602002602001015192506116c8565b6040805180820190915260018152600b60fa1b602082015261169d90849063ffffffff612a6716565b92506116c58282815181106116ae57fe5b602002602001015184612a6790919063ffffffff16565b92505b60010161162e565b505090565b3360009081526001602052604090205460609060ff1661172a576040805162461bcd60e51b81526020600482015260196024820152600080516020612e42833981519152604482015290519081900360640190fd5b600080905060006008846040518082805190602001908083835b602083106117635780518252601f199092019160209182019101611744565b51815160209384036101000a60001901801990921691161790529201948552506040519384900301909220546001600160a01b031692505050338114156117a957600191505b816117e55760405162461bcd60e51b8152600401808060200182810382526025815260200180612d9c6025913960400191505060405180910390fd5b6007846040518082805190602001908083835b602083106118175780518252601f1990920191602091820191016117f8565b518151600019602094850361010090810a820192831692199390931691909117909252949092019687526040805197889003820188208054601f60026001831615909802909501169590950492830182900482028801820190528187529294509250508301828280156118cb5780601f106118a0576101008083540402835291602001916118cb565b820191906000526020600020905b8154815290600101906020018083116118ae57829003601f168201915b505050505092505050919050565b3360009081526001602052604090205460609060ff1661192e576040805162461bcd60e51b81526020600482015260196024820152600080516020612e42833981519152604482015290519081900360640190fd5b600061193a338461299f565b9050806119785760405162461bcd60e51b8152600401808060200182810382526037815260200180612de76037913960400191505060405180910390fd5b6002836040518082805190602001908083835b602083106119aa5780518252601f19909201916020918201910161198b565b518151600019602094850361010090810a820192831692199390931691909117909252949092019687526040805197889003820188208054601f6002600183161590980290950116959095049283018290048202880182019052818752929450925050830182828015611a5e5780601f10611a3357610100808354040283529160200191611a5e565b820191906000526020600020905b815481529060010190602001808311611a4157829003601f168201915b5050505050915050919050565b6000546001600160a01b03165b90565b6000546001600160a01b0316331490565b3360009081526001602052604090205460ff16611ade576040805162461bcd60e51b81526020600482015260196024820152600080516020612e42833981519152604482015290519081900360640190fd5b6005816040518082805190602001908083835b60208310611b105780518252601f199092019160209182019101611af1565b51815160209384036101000a60001901801990921691161790529201948552506040519384900301909220546001600160a01b031633149150611b9c9050576040805162461bcd60e51b815260206004820152601f60248201527f43616c6c6572206973206e6f742074686520706f6c696379206f776e65722100604482015290519081900360640190fd5b336000908152600660205260408120905b8154811015611ceb578280519060200120828281548110611bca57fe5b906000526020600020016040518082805460018160011615610100020316600290048015611c2f5780601f10611c0d576101008083540402835291820191611c2f565b820191906000526020600020905b815481529060010190602001808311611c1b575b505091505060405180910390201415611ce357805b825460001901811015611ca857828160010181548110611c6057fe5b90600052602060002001838281548110611c7657fe5b906000526020600020019080546001816001161561010002031660029004611c9f929190612bfe565b50600101611c44565b50815482906000198101908110611cbb57fe5b906000526020600020016000611cd19190612c83565b8154611ce1836000198301612cc7565b505b600101611bad565b50816040518082805190602001908083835b60208310611d1c5780518252601f199092019160209182019101611cfd565b5181516020939093036101000a60001901801990911692169190911790526040519201829003822093503392507fe9d8e575dc9bf6fb198822ef40c436dbed83035d25465749622c7f783651d5159160009150a35050565b3360009081526001602052604090205460609060ff16611dc9576040805162461bcd60e51b81526020600482015260196024820152600080516020612e42833981519152604482015290519081900360640190fd5b336000908152600960209081526040808320805482518185028101850190935280835260609492939192909184015b82821015611ea35760008481526020908190208301805460408051601f6002600019610100600187161502019094169390930492830185900485028101850190915281815292830182828015611e8f5780601f10611e6457610100808354040283529160200191611e8f565b820191906000526020600020905b815481529060010190602001808311611e7257829003601f168201915b505050505081526020019060010190611df8565b50506040805160208101909152600080825290955092935050505b81518110156116d0576000828281518110611ed557fe5b6020026020010151511115611f415780611f0457818181518110611ef557fe5b60200260200101519250611f41565b6040805180820190915260018152600b60fa1b6020820152611f2d90849063ffffffff612a6716565b9250611f3e8282815181106116ae57fe5b92505b600101611ebe565b6000546001600160a01b031681565b3360009081526001602052604090205460ff16611faa576040805162461bcd60e51b81526020600482015260196024820152600080516020612e42833981519152604482015290519081900360640190fd5b6003816040518082805190602001908083835b60208310611fdc5780518252601f199092019160209182019101611fbd565b51815160209384036101000a60001901801990921691161790529201948552506040519384900301909220546001600160a01b0316331491506120689050576040805162461bcd60e51b815260206004820181905260248201527f43616c6c6572206973206e6f74207468652070726f64756374206f776e657221604482015290519081900360640190fd5b6001600160a01b0382166000908152600a60209081526040822080546001810180835591845292829020845191936120a69391019190850190612cf0565b5050806040518082805190602001908083835b602083106120d85780518252601f1990920191602091820191016120b9565b5181516020939093036101000a600019018019909116921691909117905260405192018290038220600080549195506001600160a01b039182169450908716927f47df909fcc0fb29a6c31aad23a80bdb09ea07722becef2f5a36bebd35d79085f9250a45050565b3360009081526001602052604090205460609060ff16612195576040805162461bcd60e51b81526020600482015260196024820152600080516020612e42833981519152604482015290519081900360640190fd5b6005826040518082805190602001908083835b602083106121c75780518252601f1990920191602091820191016121a8565b51815160209384036101000a60001901801990921691161790529201948552506040519384900301909220546001600160a01b0316331491506122539050576040805162461bcd60e51b815260206004820181905260248201527f43616c6c657220617265206e6f742074686520706f6c696379206f776e657221604482015290519081900360640190fd5b6004826040518082805190602001908083835b602083106122855780518252601f199092019160209182019101612266565b518151600019602094850361010090810a820192831692199390931691909117909252949092019687526040805197889003820188208054601f60026001831615909802909501169590950492830182900482028801820190528187529294509250508301828280156123395780601f1061230e57610100808354040283529160200191612339565b820191906000526020600020905b81548152906001019060200180831161231c57829003601f168201915b50505050509050919050565b3360009081526001602052604090205460ff16612397576040805162461bcd60e51b81526020600482015260196024820152600080516020612e42833981519152604482015290519081900360640190fd5b806002836040518082805190602001908083835b602083106123ca5780518252601f1990920191602091820191016123ab565b51815160209384036101000a6000190180199092169116179052920194855250604051938490038101909320845161240b9591949190910192509050612cf0565b50336003836040518082805190602001908083835b6020831061243f5780518252601f199092019160209182019101612420565b51815160209384036101000a6000190180199092169116179052920194855250604051938490038101842080546001600160a01b0319166001600160a01b0396909616959095179094555050835184928291908401908083835b602083106124b85780518252601f199092019160209182019101612499565b5181516020939093036101000a60001901801990911692169190911790526040519201829003822093503392507faf967c3669791b1dccd8d89780d2482ab2364a1b74238dd917a9b1b91f49838b9160009150a35050565b6001600160a01b031660009081526001602052604090205460ff1690565b3360009081526001602052604090205460609060ff16612583576040805162461bcd60e51b81526020600482015260196024820152600080516020612e42833981519152604482015290519081900360640190fd5b6003826040518082805190602001908083835b602083106125b55780518252601f199092019160209182019101612596565b51815160209384036101000a60001901801990921691161790529201948552506040519384900301909220546001600160a01b0316331491506126419050576040805162461bcd60e51b815260206004820181905260248201527f43616c6c6572206973206e6f74207468652070726f64756374206f776e657221604482015290519081900360640190fd5b600282604051808280519060200190808383602083106122855780518252601f199092019160209182019101612266565b61267a611a7b565b6126cb576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6126d481612b5e565b50565b3360009081526001602052604090205460ff16612729576040805162461bcd60e51b81526020600482015260196024820152600080516020612e42833981519152604482015290519081900360640190fd5b6000612735338461299f565b9050806127735760405162461bcd60e51b8152600401808060200182810382526037815260200180612de76037913960400191505060405180910390fd5b60006003846040518082805190602001908083835b602083106127a75780518252601f199092019160209182019101612788565b51815160209384036101000a600019018019909216911617905292019485525060405193849003810184205489516001600160a01b0390911695508794600494508a9350918291908401908083835b602083106128155780518252601f1990920191602091820191016127f6565b51815160209384036101000a600019018019909216911617905292019485525060405193849003810190932084516128569591949190910192509050612cf0565b50806005866040518082805190602001908083835b6020831061288a5780518252601f19909201916020918201910161286b565b51815160209384036101000a60001901801990921691161790529201948552506040805194859003820190942080546001600160a01b0319166001600160a01b03968716179055938516600090815260068552928320805460018101808355918552938590208a519195612907959190910193508a019150612cf0565b5050846040518082805190602001908083835b602083106129395780518252601f19909201916020918201910161291a565b5181516020939093036101000a6000190180199091169216919091179052604051920182900382209350339250506001600160a01b038416907f6b9cb907108df2958fad0180bdaee958643e100dc5f5ad8ee28fb461f468458490600090a45050505050565b6001600160a01b0382166000908152600a602052604081208190815b8154811015612a5d5784805190602001208282815481106129d857fe5b906000526020600020016040518082805460018160011615610100020316600290048015612a3d5780601f10612a1b576101008083540402835291820191612a3d565b820191906000526020600020905b815481529060010190602001808311612a29575b505091505060405180910390201415612a5557600192505b6001016129bb565b5090949350505050565b6060808390506060839050606081518351016040519080825280601f01601f191660200182016040528015612aa3576020820181803883390190505b509050806000805b8551811015612afc57858181518110612ac057fe5b602001015160f81c60f81b838380600101945081518110612add57fe5b60200101906001600160f81b031916908160001a905350600101612aab565b5060005b8451811015612b5157848181518110612b1557fe5b602001015160f81c60f81b838380600101945081518110612b3257fe5b60200101906001600160f81b031916908160001a905350600101612b00565b5090979650505050505050565b6001600160a01b038116612ba35760405162461bcd60e51b8152600401808060200182810382526026815260200180612dc16026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10612c375780548555612c73565b82800160010185558215612c7357600052602060002091601f016020900482015b82811115612c73578254825591600101919060010190612c58565b50612c7f929150612d5e565b5090565b50805460018160011615610100020316600290046000825580601f10612ca957506126d4565b601f0160209004906000526020600020908101906126d49190612d5e565b815481835581811115612ceb57600083815260209020612ceb918101908301612d78565b505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10612d3157805160ff1916838001178555612c73565b82800160010185558215612c73579182015b82811115612c73578251825591602001919060010190612d43565b611a7891905b80821115612c7f5760008155600101612d64565b611a7891905b80821115612c7f576000612d928282612c83565b50600101612d7e56fe43616c6c657220617265206e6f742074686520656e646f7273656d656e74206f776e6572214f776e61626c653a206e6577206f776e657220697320746865207a65726f206164647265737343616c6c657220646f6e27742068617665207468652073616c65732061677265656d656e7420666f7220746869732070726f647563742143616c6c6572206973206e6f742074686520656e646f7273656d656e74206f776e65722143616c6c6572206973206e6f7420726567697374657265642100000000000000a265627a7a72305820ab265df4b7438d15f0ff9535e5f2665ccdd144d503e8af1579f2fb4519f3e62764736f6c634300050a0032";

    public static final String FUNC_WITHDRAWAGREEMENT = "withdrawAgreement";

    public static final String FUNC_REGISTERORG = "registerOrg";

    public static final String FUNC_ISSUEENDORSEMENT = "issueEndorsement";

    public static final String FUNC_WITHDRAWPENDINGENDORSEMENT = "withdrawPendingEndorsement";

    public static final String FUNC_FINDPENDINGPOLICIES = "findPendingPolicies";

    public static final String FUNC_FINDENDORSEMENT = "findEndorsement";

    public static final String FUNC_FINDPRODUCTFROMCHANNEL = "findProductFromChannel";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_ISOWNER = "isOwner";

    public static final String FUNC_WITHDRAWPENDINGPOLICY = "withdrawPendingPolicy";

    public static final String FUNC_FINDPENDINGENDORSEMENTS = "findPendingEndorsements";

    public static final String FUNC__OWNER = "_owner";

    public static final String FUNC_APPROVEAGREEMENT = "approveAgreement";

    public static final String FUNC_FINDPOLICY = "findPolicy";

    public static final String FUNC_RELEASEPRODUCT = "releaseProduct";

    public static final String FUNC_FINDORG = "findOrg";

    public static final String FUNC_FINDPRODUCT = "findProduct";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_ISSUEPOLICY = "issuePolicy";

    public static final Event RELEASEPRODUCT_EVENT = new Event("ReleaseProduct", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Utf8String>(true) {}));
    ;

    public static final Event ISSUEPOLICY_EVENT = new Event("IssuePolicy", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Utf8String>(true) {}));
    ;

    public static final Event WITHDRAWPENDINGPOLICY_EVENT = new Event("WithdrawPendingPolicy", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Utf8String>(true) {}));
    ;

    public static final Event ISSUEENDORSEMENT_EVENT = new Event("IssueEndorsement", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Utf8String>(true) {}));
    ;

    public static final Event WITHDRAWPENDINGENDORSEMENT_EVENT = new Event("WithdrawPendingEndorsement", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Utf8String>(true) {}));
    ;

    public static final Event APPROVESALESAGREEMENT_EVENT = new Event("ApproveSalesAgreement", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Utf8String>(true) {}));
    ;

    public static final Event REGISTERORG_EVENT = new Event("RegisterOrg", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    @Deprecated
    protected InsuranceSales(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected InsuranceSales(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected InsuranceSales(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected InsuranceSales(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteCall<TransactionReceipt> withdrawAgreement(String channel, String productCode) {
        final Function function = new Function(
                FUNC_WITHDRAWAGREEMENT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(channel), 
                new org.web3j.abi.datatypes.Utf8String(productCode)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> registerOrg(String org) {
        final Function function = new Function(
                FUNC_REGISTERORG, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(org)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> issueEndorsement(String endorsementNumber, String productCode, String endorsement) {
        final Function function = new Function(
                FUNC_ISSUEENDORSEMENT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(endorsementNumber), 
                new org.web3j.abi.datatypes.Utf8String(productCode), 
                new org.web3j.abi.datatypes.Utf8String(endorsement)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> withdrawPendingEndorsement(String endorsementNumber) {
        final Function function = new Function(
                FUNC_WITHDRAWPENDINGENDORSEMENT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(endorsementNumber)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> findPendingPolicies() {
        final Function function = new Function(FUNC_FINDPENDINGPOLICIES, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<String> findEndorsement(String endorsementNumber) {
        final Function function = new Function(FUNC_FINDENDORSEMENT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(endorsementNumber)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<String> findProductFromChannel(String productCode) {
        final Function function = new Function(FUNC_FINDPRODUCTFROMCHANNEL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(productCode)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<String> owner() {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<Boolean> isOwner() {
        final Function function = new Function(FUNC_ISOWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<TransactionReceipt> withdrawPendingPolicy(String policyNumber) {
        final Function function = new Function(
                FUNC_WITHDRAWPENDINGPOLICY, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(policyNumber)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> findPendingEndorsements() {
        final Function function = new Function(FUNC_FINDPENDINGENDORSEMENTS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<String> _owner() {
        final Function function = new Function(FUNC__OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> approveAgreement(String channel, String productCode) {
        final Function function = new Function(
                FUNC_APPROVEAGREEMENT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(channel), 
                new org.web3j.abi.datatypes.Utf8String(productCode)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> findPolicy(String policyNumber) {
        final Function function = new Function(FUNC_FINDPOLICY, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(policyNumber)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> releaseProduct(String productCode, String productSpec) {
        final Function function = new Function(
                FUNC_RELEASEPRODUCT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(productCode), 
                new org.web3j.abi.datatypes.Utf8String(productSpec)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Boolean> findOrg(String org) {
        final Function function = new Function(FUNC_FINDORG, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(org)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<String> findProduct(String productCode) {
        final Function function = new Function(FUNC_FINDPRODUCT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(productCode)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> transferOwnership(String newOwner) {
        final Function function = new Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(newOwner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> issuePolicy(String policyNumber, String productCode, String policy) {
        final Function function = new Function(
                FUNC_ISSUEPOLICY, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(policyNumber), 
                new org.web3j.abi.datatypes.Utf8String(productCode), 
                new org.web3j.abi.datatypes.Utf8String(policy)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public List<ReleaseProductEventResponse> getReleaseProductEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(RELEASEPRODUCT_EVENT, transactionReceipt);
        ArrayList<ReleaseProductEventResponse> responses = new ArrayList<ReleaseProductEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ReleaseProductEventResponse typedResponse = new ReleaseProductEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.productCode = (byte[]) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ReleaseProductEventResponse> releaseProductEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, ReleaseProductEventResponse>() {
            @Override
            public ReleaseProductEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(RELEASEPRODUCT_EVENT, log);
                ReleaseProductEventResponse typedResponse = new ReleaseProductEventResponse();
                typedResponse.log = log;
                typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.productCode = (byte[]) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ReleaseProductEventResponse> releaseProductEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(RELEASEPRODUCT_EVENT));
        return releaseProductEventFlowable(filter);
    }

    public List<IssuePolicyEventResponse> getIssuePolicyEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ISSUEPOLICY_EVENT, transactionReceipt);
        ArrayList<IssuePolicyEventResponse> responses = new ArrayList<IssuePolicyEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            IssuePolicyEventResponse typedResponse = new IssuePolicyEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.issuer = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.policyNumber = (byte[]) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<IssuePolicyEventResponse> issuePolicyEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, IssuePolicyEventResponse>() {
            @Override
            public IssuePolicyEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ISSUEPOLICY_EVENT, log);
                IssuePolicyEventResponse typedResponse = new IssuePolicyEventResponse();
                typedResponse.log = log;
                typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.issuer = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.policyNumber = (byte[]) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<IssuePolicyEventResponse> issuePolicyEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ISSUEPOLICY_EVENT));
        return issuePolicyEventFlowable(filter);
    }

    public List<WithdrawPendingPolicyEventResponse> getWithdrawPendingPolicyEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(WITHDRAWPENDINGPOLICY_EVENT, transactionReceipt);
        ArrayList<WithdrawPendingPolicyEventResponse> responses = new ArrayList<WithdrawPendingPolicyEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            WithdrawPendingPolicyEventResponse typedResponse = new WithdrawPendingPolicyEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.policyNumber = (byte[]) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<WithdrawPendingPolicyEventResponse> withdrawPendingPolicyEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, WithdrawPendingPolicyEventResponse>() {
            @Override
            public WithdrawPendingPolicyEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(WITHDRAWPENDINGPOLICY_EVENT, log);
                WithdrawPendingPolicyEventResponse typedResponse = new WithdrawPendingPolicyEventResponse();
                typedResponse.log = log;
                typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.policyNumber = (byte[]) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<WithdrawPendingPolicyEventResponse> withdrawPendingPolicyEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(WITHDRAWPENDINGPOLICY_EVENT));
        return withdrawPendingPolicyEventFlowable(filter);
    }

    public List<IssueEndorsementEventResponse> getIssueEndorsementEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ISSUEENDORSEMENT_EVENT, transactionReceipt);
        ArrayList<IssueEndorsementEventResponse> responses = new ArrayList<IssueEndorsementEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            IssueEndorsementEventResponse typedResponse = new IssueEndorsementEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.issuer = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.endorsementNumber = (byte[]) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<IssueEndorsementEventResponse> issueEndorsementEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, IssueEndorsementEventResponse>() {
            @Override
            public IssueEndorsementEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ISSUEENDORSEMENT_EVENT, log);
                IssueEndorsementEventResponse typedResponse = new IssueEndorsementEventResponse();
                typedResponse.log = log;
                typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.issuer = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.endorsementNumber = (byte[]) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<IssueEndorsementEventResponse> issueEndorsementEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ISSUEENDORSEMENT_EVENT));
        return issueEndorsementEventFlowable(filter);
    }

    public List<WithdrawPendingEndorsementEventResponse> getWithdrawPendingEndorsementEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(WITHDRAWPENDINGENDORSEMENT_EVENT, transactionReceipt);
        ArrayList<WithdrawPendingEndorsementEventResponse> responses = new ArrayList<WithdrawPendingEndorsementEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            WithdrawPendingEndorsementEventResponse typedResponse = new WithdrawPendingEndorsementEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.endorsementNumber = (byte[]) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<WithdrawPendingEndorsementEventResponse> withdrawPendingEndorsementEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, WithdrawPendingEndorsementEventResponse>() {
            @Override
            public WithdrawPendingEndorsementEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(WITHDRAWPENDINGENDORSEMENT_EVENT, log);
                WithdrawPendingEndorsementEventResponse typedResponse = new WithdrawPendingEndorsementEventResponse();
                typedResponse.log = log;
                typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.endorsementNumber = (byte[]) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<WithdrawPendingEndorsementEventResponse> withdrawPendingEndorsementEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(WITHDRAWPENDINGENDORSEMENT_EVENT));
        return withdrawPendingEndorsementEventFlowable(filter);
    }

    public List<ApproveSalesAgreementEventResponse> getApproveSalesAgreementEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVESALESAGREEMENT_EVENT, transactionReceipt);
        ArrayList<ApproveSalesAgreementEventResponse> responses = new ArrayList<ApproveSalesAgreementEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApproveSalesAgreementEventResponse typedResponse = new ApproveSalesAgreementEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.approver = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.productCode = (byte[]) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ApproveSalesAgreementEventResponse> approveSalesAgreementEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, ApproveSalesAgreementEventResponse>() {
            @Override
            public ApproveSalesAgreementEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVESALESAGREEMENT_EVENT, log);
                ApproveSalesAgreementEventResponse typedResponse = new ApproveSalesAgreementEventResponse();
                typedResponse.log = log;
                typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.approver = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.productCode = (byte[]) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ApproveSalesAgreementEventResponse> approveSalesAgreementEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVESALESAGREEMENT_EVENT));
        return approveSalesAgreementEventFlowable(filter);
    }

    public List<RegisterOrgEventResponse> getRegisterOrgEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(REGISTERORG_EVENT, transactionReceipt);
        ArrayList<RegisterOrgEventResponse> responses = new ArrayList<RegisterOrgEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RegisterOrgEventResponse typedResponse = new RegisterOrgEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.orgAddress = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RegisterOrgEventResponse> registerOrgEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, RegisterOrgEventResponse>() {
            @Override
            public RegisterOrgEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(REGISTERORG_EVENT, log);
                RegisterOrgEventResponse typedResponse = new RegisterOrgEventResponse();
                typedResponse.log = log;
                typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.orgAddress = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<RegisterOrgEventResponse> registerOrgEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(REGISTERORG_EVENT));
        return registerOrgEventFlowable(filter);
    }

    public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, OwnershipTransferredEventResponse>() {
            @Override
            public OwnershipTransferredEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
                OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
                typedResponse.log = log;
                typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    @Deprecated
    public static InsuranceSales load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new InsuranceSales(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static InsuranceSales load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new InsuranceSales(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static InsuranceSales load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new InsuranceSales(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static InsuranceSales load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new InsuranceSales(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<InsuranceSales> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(InsuranceSales.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<InsuranceSales> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(InsuranceSales.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<InsuranceSales> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(InsuranceSales.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<InsuranceSales> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(InsuranceSales.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class ReleaseProductEventResponse {
        public Log log;

        public String owner;

        public byte[] productCode;
    }

    public static class IssuePolicyEventResponse {
        public Log log;

        public String owner;

        public String issuer;

        public byte[] policyNumber;
    }

    public static class WithdrawPendingPolicyEventResponse {
        public Log log;

        public String owner;

        public byte[] policyNumber;
    }

    public static class IssueEndorsementEventResponse {
        public Log log;

        public String owner;

        public String issuer;

        public byte[] endorsementNumber;
    }

    public static class WithdrawPendingEndorsementEventResponse {
        public Log log;

        public String owner;

        public byte[] endorsementNumber;
    }

    public static class ApproveSalesAgreementEventResponse {
        public Log log;

        public String owner;

        public String approver;

        public byte[] productCode;
    }

    public static class RegisterOrgEventResponse {
        public Log log;

        public String owner;

        public String orgAddress;
    }

    public static class OwnershipTransferredEventResponse {
        public Log log;

        public String previousOwner;

        public String newOwner;
    }
}
